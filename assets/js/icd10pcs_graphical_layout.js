// Generated by CoffeeScript 1.6.1
(function() {
  var Gradients, Pcs_build_codes, Pcs_character, Pcs_commands, Pcs_force, Setup, Utility, pcs_force, setup, vis;

  Setup = (function() {

    function Setup() {}

    Setup.prototype.svg = function() {
      return d3.select("#icd10pcs_graphical_layout").append("svg:svg").attr({
        "width": "100%",
        "height": "100%"
      }).attr("viewBox", "0 0 " + 900 + " " + 800).attr("preserveAspectRatio", "xMidYMid meet").attr("pointer-events", "all").style("margin-left", "0%").style("margin-right", "0%").style("margin-top", "20px").style("border", "2px solid green").style("background-color", "black").style("cursor", "move").call(d3.behavior.zoom().on("zoom", this.redraw));
    };

    Setup.prototype.vis = function() {
      return this.svg().append('svg:g');
    };

    Setup.prototype.redraw = function() {
      var scale, trans;
      trans = d3.event.translate;
      scale = d3.event.scale;
      return vis.attr("transform", "translate(" + trans + ")" + " scale(" + scale + ")");
    };

    return Setup;

  })();

  Gradients = (function() {

    function Gradients() {}

    Gradients.prototype.radial = function(group, id, color_1, color_2) {
      var gradient_radial;
      gradient_radial = group.append("svg:defs").append("svg:radialGradient").attr("id", id).attr("cx", "50%").attr("cy", "50%").attr("fx", "50%").attr("fy", "80%").attr("spreadMethod", "pad");
      gradient_radial.append("svg:stop").attr("offset", "0%").attr("stop-color", color_1).attr("stop-opacity", 1);
      return gradient_radial.append("svg:stop").attr("offset", "100%").attr("stop-color", color_2).attr("stop-opacity", 0.7);
    };

    Gradients.prototype.linear = function(group, id, color_1, color_2) {
      var gradient_linear;
      gradient_linear = group.append("svg:defs").append("svg:linearGradient").attr("id", id).attr("x", "0%").attr("y", "0%").attr("x2", "100%").attr("y2", "100%");
      gradient_linear.append("svg:stop").attr("offset", "0%").attr("stop-color", color_1).attr("stop-opacity", 1);
      return gradient_linear.append("svg:stop").attr("offset", "100%").attr("stop-color", color_2).attr("stop-opacity", 0.7);
    };

    Gradients.prototype.virtual_light = function(group, id, color_1, color_2) {
      var light;
      light = group.append("svg:defs").append("svg:linearGradient").attr("id", id).attr("x", "0%").attr("y", "0%").attr("x2", "0%").attr("y2", "100%");
      light.append("svg:stop").attr("offset", "0%").attr("stop-color", color_1).attr("stop-opacity", 1);
      return light.append("svg:stop").attr("offset", "0.4").attr("stop-color", color_2).attr("stop-opacity", 0);
    };

    return Gradients;

  })();

  Pcs_commands = (function() {

    function Pcs_commands() {}

    Pcs_commands.prototype.show_defs = function(d) {
      var defs, fill, utility;
      utility = new Utility();
      fill = utility.fill();
      jQuery("#icd10_graphical_layout_info").html('');
      defs = show_from_code('../icd10pcs/show_icd10pcs_definitions.php', 'icd10_graphical_layout_info', d.code);
      return null;
    };

    Pcs_commands.prototype.show_record = function(d) {
      var record;
      jQuery("#icd10_graphical_layout_info").html('');
      record = show_from_code('../icd10pcs/show_icd10pcs_from_code.php', 'icd10_graphical_layout_info', d.code);
      return null;
    };

    Pcs_commands.prototype.hide_details = function(d) {
      jQuery("#icd10_graphical_layout_info").html('');
      return null;
    };

    Pcs_commands.prototype.search_name = function(searchTerm, node) {
      var searchRegEx;
      searchRegEx = new RegExp("\\b" + searchTerm.toLowerCase() + "\\b", "g");
      return node.each(function(d) {
        var circle_trans, element, elm, match;
        element = d3.select(this);
        match = d.name.toLowerCase().search(searchRegEx);
        if (searchTerm.length > 0 && match >= 0) {
          elm = element.append("svg:g");
          circle_trans = elm.append("circle");
          circle_trans.transition().duration(500).attr("transform", function(d) {
            return "translate(7,4)";
          }).attr("r", function(d) {
            return 7 * 4;
          }).attr('fill', "none").attr('stroke-width', "3.5").attr('stroke', "magenta").each("end", function() {
            return circle_trans.transition().duration(1500).remove();
          });
          return d.searched = true;
        } else {
          return d.searched = false;
        }
      });
    };

    Pcs_commands.prototype.search_code = function(searchTerm, node) {
      var searchRegEx;
      searchRegEx = new RegExp("\\b" + searchTerm + "\\b", "g");
      return node.each(function(d) {
        var circle_trans, element, elm, match;
        element = d3.select(this);
        match = d.code.search(searchRegEx);
        if (searchTerm.length > 0 && match >= 0) {
          elm = element.append("svg:g");
          circle_trans = elm.append("circle");
          circle_trans.transition().duration(500).attr("transform", function(d) {
            return "translate(7,4)";
          }).attr("r", function(d) {
            return 7 * 4;
          }).attr('fill', "none").attr('stroke-width', "3.5").attr('stroke', "red").each("end", function() {
            return circle_trans.transition().duration(1500).remove();
          });
          return d.searched = true;
        } else {
          return d.searched = false;
        }
      });
    };

    return Pcs_commands;

  })();

  Utility = (function() {

    function Utility() {}

    Utility.prototype.polygon = function(sides, size, radius, center) {
      var angle, circle, i, points, x, y, _i, _ref;
      circle = 2 * Math.PI;
      angle = circle / sides;
      points = [];
      for (i = _i = 0, _ref = sides - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        x = (Math.cos(angle * i) * size) + center[0];
        y = (Math.sin(angle * i) * size) + center[1];
        points[i] = {
          "x": x,
          "y": y,
          "r": radius
        };
      }
      return points;
    };

    Utility.prototype.circle_xy = function(angle, radius) {
      var points, x, y;
      points = [];
      x = Math.cos(angle) * radius;
      y = Math.sin(angle) * radius;
      points = {
        "x": x,
        "y": y
      };
      return points;
    };

    Utility.prototype.fill = function() {
      return d3.scale.category20();
    };

    Utility.prototype.rotate_digits = function() {
      return d3.select(this).transition().duration(1000).attrTween('transform', function(d) {
        return d3.interpolateString('rotate(0 40 50)', 'rotate(360 40 50)');
      });
    };

    Utility.prototype.flatten = function(json_data) {
      var i, nodes, recurse;
      nodes = [];
      i = 0;
      recurse = function(node) {
        if (node.children) {
          node.children.forEach(recurse);
        }
        if (!node.id) {
          node.id = ++i;
        }
        return nodes.push(node);
      };
      recurse(json_data);
      return nodes;
    };

    Utility.prototype.collapse_tree = function(d) {
      if (d.children) {
        d._children = d.children;
        d._children.forEach(Utility.prototype.collapse_tree);
        return d.children = null;
      }
    };

    Utility.prototype.click = function(d) {
      if (d.children) {
        d._children = d.children;
        d.children = null;
      } else {
        d.children = d._children;
        d._children = null;
      }
      return pcs_force.update();
    };

    return Utility;

  })();

  Pcs_character = (function() {
    var commands, fill, gradients, rect_opacity, unit, utility;

    function Pcs_character() {}

    utility = new Utility();

    fill = utility.fill();

    gradients = new Gradients();

    commands = new Pcs_commands();

    unit = 5;

    rect_opacity = 0.6;

    Pcs_character.prototype.make_info_group = function(axis_group) {
      var axis_info_center_circle, axis_info_center_circle_actions, axis_info_center_circle_attr, axis_info_group, defs_gradient, defs_rect, defs_rect_actions, defs_rect_xy, gradient, info_defs, info_rect, record_gradient, record_rect, record_rect_actions, record_rect_xy;
      axis_info_group = axis_group.append("svg:g").attr("id", "axis_info_group");
      gradient = gradients.radial(axis_info_group, "central_circle_gradient", "cyan", "blue");
      axis_info_center_circle = axis_info_group.append("svg:circle").style("stroke", "none");
      axis_info_center_circle_attr = axis_info_center_circle.attr("cx", 0).attr("cy", 0).attr("r", 6).style('fill', "url(#central_circle_gradient)");
      axis_info_center_circle_actions = axis_info_center_circle_attr.on("mouseover", function() {
        return d3.select(this).transition().duration(700).attr("transform", function(d) {
          return "translate(7,4)";
        }).attr("r", function(d) {
          return 6 * 4;
        }).each("end", function() {
          return d3.select(this).transition().duration(300).attr("r", function(d) {
            return 6 * 1;
          }).attr("transform", function(d) {
            return "translate(0,0)";
          }).attr("r", function(d) {
            return 6 * 1;
          });
        });
      });
      info_defs = axis_info_group.append('svg:defs');
      info_rect = info_defs.append("svg:rect").attr("id", "axis_info_rect").attr("width", 7).attr("height", 7).attr("rx", 1.5).attr("ry", 1.5).style("cursor", "pointer").style("opacity", 1);
      defs_rect_xy = utility.circle_xy(-90, 16);
      defs_gradient = gradients.linear(axis_info_group, "defs_gradient", "blue", "#32FFFF");
      defs_rect = axis_info_group.append("use").attr("xlink:href", "#axis_info_rect").attr("id", "defs_rect").attr("x", defs_rect_xy.x).attr("y", defs_rect_xy.y).style("stroke", "#417DC1").style("fill", "url(#defs_gradient)");
      defs_rect_actions = defs_rect.on("mouseover", commands.show_defs);
      record_rect_xy = utility.circle_xy(-135, 16);
      record_gradient = gradients.linear(axis_info_group, "record_gradient", "#32FFFF", "blue");
      record_rect = axis_info_group.append("use").attr("xlink:href", "#axis_info_rect").attr("id", "defs_rect").attr("x", record_rect_xy.x).attr("y", record_rect_xy.y).style("stroke", "#56A0D3").style("fill", "url(#record_gradient)");
      return record_rect_actions = record_rect.on("mouseover", commands.show_record);
    };

    Pcs_character.prototype.make_digit = function(group, div, pos_1, pos_2) {
      var text, title;
      text = this.text(group, pos_1, pos_2);
      return title = this.title(group);
    };

    Pcs_character.prototype.character_group = function(previous_group, id, step) {
      var char_unit, system_group;
      char_unit = 3;
      return system_group = previous_group.append("svg:g").attr("id", id).attr("transform", function(d) {
        return "translate(" + char_unit * step + "," + 0 + ")";
      });
    };

    Pcs_character.prototype.text = function(group, pos_1, pos_2) {
      var text;
      return text = group.append("svg:text").attr("class", "nodetext").attr("text-anchor", "middle").attr("dy", 3).style("fill", "#9BD1FA").attr("stroke-width", 0).style("font", "Arial").style("font-size", "10px").style("font-weight", "bold").style("opacity", "1.0").text(function(d) {
        return d.code.substring(pos_1, pos_2);
      });
    };

    Pcs_character.prototype.title = function(group) {
      var title;
      return title = group.append("title").text(function(d) {
        var data;
        if (d.code.length > 0) {
          data = d.name + " [" + d.code + "] ";
          return data;
        } else {
          return null;
        }
      });
    };

    return Pcs_character;

  })();

  Pcs_build_codes = (function() {
    var fill, pcs_char, rect_opacity, step, unit, utility;

    function Pcs_build_codes() {}

    pcs_char = new Pcs_character();

    utility = new Utility();

    unit = 5;

    step = 5;

    rect_opacity = 0.6;

    fill = utility.fill();

    Pcs_build_codes.prototype.draw = function(axis_group) {
      var digits;
      pcs_char.make_info_group(axis_group);
      return digits = this.make_all_digits(axis_group);
    };

    Pcs_build_codes.prototype.make_all_digits = function(axis_group) {
      var approach_digit, approach_group, body_part_digit, body_part_group, body_system_digit, body_system_group, device_digit, device_group, digits_group, operation_digit, operation_group, qualifier_digit, qualifier_group, section_digit, section_group;
      digits_group = axis_group.append("svg:g").attr("id", "digits_group").attr("transform", function(d) {
        return "translate(" + 2 + "," + 0 + ")";
      });
      section_group = pcs_char.character_group(digits_group, "section_group", step * 1);
      section_digit = pcs_char.make_digit(section_group, '#digits_square', 0, 1);
      body_system_group = pcs_char.character_group(digits_group, "body_system_group", step * 2);
      body_system_digit = pcs_char.make_digit(body_system_group, '#digits_square', 1, 2);
      operation_group = pcs_char.character_group(digits_group, "operation_group", step * 3);
      operation_digit = pcs_char.make_digit(operation_group, '#digits_square', 2, 3);
      body_part_group = pcs_char.character_group(digits_group, " body_part_group", step * 4);
      body_part_digit = pcs_char.make_digit(body_part_group, '#digits_square', 3, 4);
      approach_group = pcs_char.character_group(digits_group, "approach_group", step * 5);
      approach_digit = pcs_char.make_digit(approach_group, '#digits_square', 4, 5);
      device_group = pcs_char.character_group(digits_group, "device_group", step * 6);
      device_digit = pcs_char.make_digit(device_group, '#digits_square', 5, 6);
      qualifier_group = pcs_char.character_group(digits_group, "qualifier_group", step * 7);
      return qualifier_digit = pcs_char.make_digit(qualifier_group, '#digits_square', 6, 7);
    };

    return Pcs_build_codes;

  })();

  Pcs_force = (function() {
    var commands, fill, height, json, link, links, node, nodes, pcs_codes, utility, width;

    function Pcs_force() {}

    json = [];

    utility = new Utility();

    fill = utility.fill();

    commands = new Pcs_commands();

    node = null;

    nodes = null;

    link = null;

    links = null;

    width = 900;

    height = 800;

    pcs_codes = new Pcs_build_codes();

    Pcs_force.prototype.init = function() {
      return d3.json("../data/icd10pcs_2014.json", function(data) {
        pcs_force.json = data;
        pcs_force.json.children.forEach(utility.collapse_tree);
        return pcs_force.update();
      });
    };

    Pcs_force.prototype.update = function() {
      var axis_group, code_draw, force, nodeEnter;
      this.nodes = utility.flatten(this.json);
      this.links = d3.layout.tree().links(this.nodes);
      force = self.d3.layout.force().distance(150).charge(-300).gravity(0.07).size([width, height]);
      force.on("tick", function() {
        vis.selectAll("g.node").attr("transform", function(d) {
          return "translate(" + d.x + "," + d.y + ")";
        });
        return vis.selectAll("line.link").attr("x1", function(d) {
          return d.source.x;
        }).attr("y1", function(d) {
          return d.source.y;
        }).attr("x2", function(d) {
          return d.target.x;
        }).attr("y2", function(d) {
          return d.target.y;
        });
      });
      link = vis.selectAll("line.link").style("stroke-width", function(d) {
        return Math.sqrt(d.source.axis * 1);
      }).data(this.links, function(d) {
        return d.source.id + "." + d.target.id;
      });
      link.enter().insert("svg:line", "g.node").attr("class", "link").attr("id", "path").style("stroke-linecap", "round").style("stroke-linejoin", "round").style("stroke", function(d) {
        return fill(d.source.axis);
      });
      link.exit().remove();
      node = vis.selectAll("g.node").data(this.nodes, function(d) {
        return d.id;
      });
      nodeEnter = node.enter().append("svg:g").attr("class", "node").on("click", utility.click).call(force.drag);
      axis_group = nodeEnter.append("svg:g").attr("id", "axis_group").style("cursor", "pointer");
      code_draw = pcs_codes.draw(axis_group);
      jQuery("#search_code").keyup(function() {
        var searchCode;
        searchCode = jQuery(this).val();
        return commands.search_code(searchCode, node);
      });
      jQuery("#search_name").keyup(function() {
        var searchName;
        searchName = jQuery(this).val();
        return commands.search_name(searchName, node);
      });
      node.exit().remove();
      return force.nodes(this.nodes).links(this.links).start();
    };

    return Pcs_force;

  })();

  setup = new Setup();

  vis = setup.vis();

  pcs_force = new Pcs_force();

  pcs_force.init();

}).call(this);
